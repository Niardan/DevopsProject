node {
    properties(
      [
        [$class: 'JobRestrictionProperty'],
        parameters(
                [
                  string(name: 'App_Brunch',
                         defaultValue: 'master',
                         description: 'App git branch/tag \n')
						 ]
              )
      ]
    )
    try {
    stage('Clone repositories') { 
            application: {
                dir('app') {
                    checkout([$class: 'GitSCM',
                    branches: [[name: "${App_Brunch}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [            
                      [$class: 'CloneOption',
                          timeout: 30
                      ]
                    ],
                    submoduleCfg: scm.submoduleCfg,
                    userRemoteConfigs: [[url: 'https://github.com/Niardan/DevopsProject.git']]])
                }
            }
          
    }

    string imagePath = "niardan/appdeploy"
    stage('Build Server') {
	dir('app/application') {
      withEnv(['DOCKER_BUILDKIT=1']) {
        withDockerRegistry([credentialsId: 'docker'])
        {
          def app = docker.build(imagePath, "-f Dockerfile ./")
          app.push()
        }
      }
	  }
    }
	
	    stage('Deploy Server') {
	dir('app/deploy/helm/application') {
      sh "helm upgrade --install --force --create-namespace --namespace app application ."
      sh "kubectl rollout restart deployment/application --namespace app"
	  }
    }
  }
    catch (err) {
    currentBuild.result = 'FAILURE'   
    throw err
    }
}
